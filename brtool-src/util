#!/usr/bin/bash

die()
{
	echo "fatal: $*" >&2
	exit 1
}

export -f die

find_scalar_word()
{
	for word in $2
	do
		if [[ "$word" == "$1" ]]
		then
			return 0
		fi
	done

	return 1
}

export -f find_scalar_word

array_index_of()
{
	local idx=0

	for arg in ${@:2}
	do
		if [[ "$arg" == "$1" ]]
		then
			echo "$idx"
			return 0
		fi
		
		((idx++))
	done

	echo '-1'
	return 1
}

export -f array_index_of

get_pair_value()
{
	grep -oP "^$1=.+" "$2" | cut -d '=' -f2
}

get_remote_info()
{
	get_pair_value "$1" "$PROJECT_PREFIX"/remote.info
}

get_project_info()
{
	get_pair_value "$1" "$PROJECT_PREFIX"/project.info
}

export -f get_pair_value get_remote_info get_project_info

request_project_info()
{
	if [[ ! -s "$PROJECT_PREFIX"/project.info ]]
	then
		die "$PROJECT_PREFIX/project.info: file not exists"
	fi
}

load_project_info()
{
	request_project_info

	export ARCHITECTURE=$(uname -m)
	export BUILD_COMMIT=$(git rev-parse HEAD)

	export PK_VERSION=$(get_project_info version)
	export PK_AUTHOR=$(get_project_info author)
	export PK_AUTHOR_CONTACT=$(get_project_info contact)
	export PK_PROJNAME=$(get_project_info projname)
	export PK_LICENSE_NOTIES=$(get_project_info license_noties)
}

export -f request_project_info load_project_info

prepare_extsrc()
{
	srcname="$1"
	upstream="$2"

	mkdir -p "$LIBRARY_SOURCE_PREFIX"
	cd "$LIBRARY_SOURCE_PREFIX"

	src="$LIBRARY_SOURCE_PREFIX"/"$srcname"

	if ! git --git-dir "$src"/.git rev-parse --git-dir > /dev/null 2>&1
	then
		echo "cloning $srcname"
		git clone -q "$upstream"
	fi

	cd "$src"

	request_project_info
	git switch -dq tags/$(get_project_info "$srcname"_stable)

	mkdir -p build
	cd build
}

export -f prepare_extsrc