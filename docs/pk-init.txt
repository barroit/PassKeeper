pk-init(1)
==========

NAME
----
pk-init - Initialize database for storing user credentials

SYNOPSIS
--------
[verse]
'pk init'

DESCRIPTION
-----------

The password could take one of the following forms:

* Passphrase with Key Derivation
* Raw Key Data (Without Key Derivation)
* Raw Key Data with Explicit Salt (Without Key Derivation)

for more information, see
https://www.zetetic.net/sqlcipher/sqlcipher-api/#PRAGMA_key[Key Explanation]

A key file will be generated if one of the following conditions is met:

* using Raw Key Data
* using Raw Key Data with Explicit Salt
* `kdf` option specified
* `hmac` option specified
* `compat` option specified

IMPORTANT: The key file also contains cipher configurations for encrypting the
database, and the database can be successfully decrypted ONLY IF the cipher
configurations are the same as those used the first time (initial phase) the
database was opened. Thus, please DO NOT LOSE this key file and store it in a
safe location.

This command will generate the db file (and an optional key file). By default,
their pathnames are obtained from the environment variables PK_CRED_DB and
PK_CRED_KY. If their environment variables are not defined in the current
session, for example, PK_CRED_DB is not defined, then this db file will be
created in the current working directory ($ pwd). The default names for the db
file and key file are '.pk-credfl' and '.pk-credky'.

The db file and key file shall not exist on the file system, or this command
will fail.

OPTIONS
-------
--encrypt[=<pwd>]::
	Encrypt database with password. The password could be a Passphrase (With
	Key Derivation), Raw Key Data (Without Key Derivation), or Raw Key Data
	with Explicit Salt (Without Key Derivation).
+
Without `pwd` specified, the password will be Raw Key Data generated by pk. If
the environment variable "PK_CRED_KY" exists, this key will be stored in the file
that PK_CRED_KY points to. Otherwise, it will be stored in the current working
directory, with a default name of `.pk-credky`.

--kdf <algo>::
	KDF algorithm used to generate the encryption key for the database. This
	option has no effect when using raw key data (without key derivation).
	The default value is PBKDF2_HMAC_SHA512, however PBKDF2HMAC_SHA256, and
	PBKDF2_HMAC_SHA1 are also supported.

--hmac <algo>::
	HMAC algorithm used to detect illegal data tampering. The default value
	is HMAC_SHA512, however HMAC_SHA256, and HMAC_SHA1 are also supported.

--compat <ver>::
	Setting this option and passing in 1, 2, 3, or 4 will cause SQLCipher
	to treat the current database as a SQLCipher `ver.x` database and
	operate with default settings consistent with that major version number
	for the current database.
