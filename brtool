#!/usr/bin/bash

export PROJECT_PREFIX=$(dirname $(realpath $0))

export BRTOOL_SOURCE_PREFIX="$PROJECT_PREFIX"/brtool-src
export BRTOOL_COMMAND_PREFIX="$BRTOOL_SOURCE_PREFIX"/command

export BRTOOL_BUILD_PREFIX="$PROJECT_PREFIX"/build
export BRTOOL_DEPSTAT_RECORD="$BRTOOL_BUILD_PREFIX"/dependency.status

export BRTOOL_BUILD_PROFILES='debug release'
export BRTOOL_PROGRAM_HOSTS='penguin window'

export LIBRARY_SOURCE_PREFIX="$PROJECT_PREFIX"/ext
export LIBRARY_INSTALL_PREFIX="$LIBRARY_SOURCE_PREFIX"/build

export TEST_SOURCE_DIRNAME=test
export TEST_SOURCE_PREFIX="$PROJECT_PREFIX"/"$TEST_SOURCE_DIRNAME"

export DOCS_SOURCE_PREFIX="$PROJECT_PREFIX"/docs 

export CMAKE_MODULE_PREFIX="$PROJECT_PREFIX"/cmake

declare -A COMMANDS

for cmdname in $(ls "$BRTOOL_COMMAND_PREFIX")
do
	COMMANDS["$cmdname"]="$BRTOOL_COMMAND_PREFIX"/"$cmdname"
done

source "$BRTOOL_SOURCE_PREFIX"/util

command="${1:-build}"

if [[ -z "${COMMANDS[$command]}" ]]
then
	die "command '$command' not found, see ./brtool help"
fi

bash "${COMMANDS[$command]}" ${*:2}