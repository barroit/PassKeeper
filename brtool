#!/usr/bin/bash

project_root="$(cd $(dirname $0) &> /dev/null && pwd)"

targets=('debug' 'test' 'coverage' 'penguin' 'window')
target="${1:-debug}"
build_dir='/dummydir'

source "$project_root/tool/util"

if [[ $target == 'clean' ]]
then
	rm -rf $(printf "$build_dir/%s " "${targets[@]}")
	exit 0
fi

if [[ $target == 'cord' ]]
then
	echo 'core' | sudo tee /proc/sys/kernel/core_pattern
	exit 0
fi

if [[ $1 == 'ssh' ]]
then
	ssh $(grep_rdcred username)@$(grep_rdcred address) "pwsh -NoExit -Command cd $(grep_rdcred userhome)"
	exit 0
fi

if printf '%s\0' "${targets[@]}" | grep -Fxqz -- $target
then
	build_dir+="/$target"
else
	echo "not a valid build type: $target"
	exit 1
fi

echo "found build type: $target"

cmake_build_target='pk'

if [[ $target == 'test' || $target == 'coverage' ]]
then
	cmake_build_target='pktest'
fi

if [[ $2 == 'scp' ]]
then
	scp $build_dir/$cmake_build_target $(grep_rdcred username)@$(grep_rdcred address):$(grep_rdcred userhome)
	exit 0
fi

export TARGET_PLATFORM=$([[ $target == 'window' ]] && echo "window" || echo "penguin")

$project_root/tool/make_openssl
$project_root/tool/make_sqlcipher

cmake -B $build_dir -DCMAKE_BUILD_TYPE=${target^} -DINSTALL_PREFIX=$install_prefix

cmake --build $build_dir --target $cmake_build_target --parallel 31